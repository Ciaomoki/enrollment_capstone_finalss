{"student_files_preview": {"Student/studlogin.php": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"api-base\" content=\"http://localhost:5000\">\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Student Login</title>\n\n  <!-- Icon set -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\"/>\n\n  <!-- Page-only stylesheet -->\n  <link rel=\"stylesheet\" href=\"../Student/stud css/studlogin.css\" />\n</head>\n<body>\n\n  <!-- ===== Centered Login Card ===== -->\n  <main class=\"center-wrapper\">\n    <section class=\"form-container\" role=\"dialog\" aria-labelledby=\"loginTitle\" aria-describedby=\"loginDesc\">\n      <img src=\"../assets/sti_logo.png\" alt=\"STI College Logo\" class=\"logo\" />\n      <h1 id=\"loginTitle\" class=\"title\">Student Login</h1>\n      <p id=\"loginDesc\" class=\"subtitle\">Sign in with your Student ID and password.</p>\n\n      <form method=\"POST\" action=\"studcheck.php\" autocomplete=\"on\" novalidate>\n<!-- Ensure Font Awesome in <head> -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\n\n<!-- Inside your .form-container -->\n<form method=\"POST\" action=\"studcheck.php\" autocomple", "Student/studcheck.php": "<?php\nsession_start();\nrequire_once __DIR__ . '/../helpers/api_client.php';\n$studentId = $_POST['studentId'] ?? $_POST['student_id'] ?? '';\n$password  = $_POST['password'] ?? '';\nif (!$studentId || !$password) { $_SESSION['error']='Student ID and Password are required'; header('Location: studlogin.php'); exit; }\nlist($status, $resp, $errno, $error) = api_request('POST', '/api/login/student', ['student_id'=>intval($studentId),'password'=>$password]);\nif ($errno) { $_SESSION['error']='Login failed (network): '.$error; header('Location: studlogin.php'); exit; }\n$data = json_decode($resp, true);\nif ($status===200 && isset($data['token'])) { $_SESSION['token']=$data['token']; $_SESSION['user']=$data['user']; header('Location: studdashb.php'); exit; }\n$_SESSION['error']=$data['error'] ?? 'Login failed'; header('Location: studlogin.php'); exit;\n?>\n", "Student/studregister.php": "<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  session_start();\n  require_once __DIR__ . '/../helpers/api_client.php';\n  $student_id = $_POST['student_id'] ?? $_POST['studentId'] ?? '';\n  $full_name  = $_POST['full_name'] ?? $_POST['name'] ?? '';\n  $email      = $_POST['email'] ?? '';\n  $course     = $_POST['course'] ?? '';\n  $password   = $_POST['password'] ?? '';\n  $confirm    = $_POST['confirm_password'] ?? '';\n  if (!$student_id || !$full_name || !$email || !$course || !$password) { $_SESSION['error']='All fields are required'; header('Location: studregister.php'); exit; }\n  if ($confirm!=='' && $confirm!==$password) { $_SESSION['error']='Passwords do not match'; header('Location: studregister.php'); exit; }\n  list($status, $resp, $errno, $error) = api_request('POST', '/api/student/register', ['student_id'=>intval($student_id),'full_name'=>$full_name,'email'=>$email,'course'=>$course,'password'=>$password]);\n  if ($errno) { $_SESSION['error']='Register failed (network): '.$error; header('Location: studregister.php'); exit; }\n  $data = json_decode($resp, true);\n  if ($status===201) { $_SESSION['flash']='Registration successful. Please login.'; header('Location: studlogin.p", "Student/studdashb.php": "<?php\nsession_start();\nif (!isset($_SESSION['token'])) { header('Location: studlogin.php'); exit; }\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Student Dashboard</title>\n\n  <!-- Icons & Styles -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" />\n  <link rel=\"stylesheet\" href=\"../assets/globalstyles.css\" />\n  <link rel=\"stylesheet\" href=\"../Student/stud css/studdashb.css\" />\n</head>\n\n<body class=\"student-dashboard\">\n  <div class=\"top-bar\"></div>\n\n  <div class=\"global-container\">\n    <!-- ================= SIDEBAR ================= -->\n    <aside id=\"sidebar\" class=\"sidebar\">\n      <div>\n        <div class=\"sidebar-header\">\n          <span class=\"logo-icon\">1</span>\n          <span class=\"logo-text\">One Enrollment</span>\n        </div>\n\n        <div class=\"sidebar-user\">\n          <i class=\"fa-solid fa-user-circle user-icon\"></i>\n          <span class=\"user-text\">Welcome Student!</span>\n        </div>\n\n        <nav class=\"sidebar-nav\">\n          <ul>\n            <li class=\"nav-item active\">\n              <a href=\"studdashb.php\" data-page=\"dash"}, "studcheck_calls_api": true, "evaluator_files_preview": {"Evaluator/evallogin.php": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"api-base\" content=\"http://localhost:5000\">\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Evaluator Login</title>\n\n  <!-- Font Awesome (for input icons) -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\n  <!-- Page-only stylesheet -->\n  <link rel=\"stylesheet\" href=\"../Evaluator/eval css/evallogin.css\" />\n</head>\n<body>\n\n  <main class=\"center-wrapper\">\n  <section class=\"form-container\" role=\"dialog\" aria-labelledby=\"evalLoginTitle\" aria-describedby=\"evalLoginDesc\">\n    <img src=\"../assets/sti_logo.png\" alt=\"STI College Logo\" class=\"logo\" />\n    <h1 id=\"evalLoginTitle\" class=\"title\">Evaluator Login</h1>\n    <p id=\"evalLoginDesc\" class=\"subtitle\">Sign in with your Evaluator ID and password.</p>\n\n    <form method=\"POST\" action=\"evaldashb.php\" autocomplete=\"on\" novalidate>\n      <div class=\"input-icon\">\n        <i class=\"fa-solid fa-id-card\" aria-hidden=\"true\"></i>\n        <label for=\"evalId\" class=\"sr-only\">Evaluator ID</label>\n        <input id=\"evalId\" name=\"evalId\" type=\"text\" placeholder=\"Evaluator ID\" autocom", "Evaluator/evalcheck.php": "MISSING", "Evaluator/evalregister.php": "<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  session_start();\n  require_once __DIR__ . '/../helpers/api_client.php';\n  $employee_id = $_POST['evaluator_id'] ?? $_POST['employee_id'] ?? '';\n  $name        = $_POST['full_name'] ?? $_POST['name'] ?? '';\n  $email       = $_POST['email'] ?? '';\n  $department  = $_POST['department'] ?? '';\n  $password    = $_POST['password'] ?? '';\n  if (!$employee_id || !$name || !$email || !$department || !$password) { $_SESSION['error']='All fields are required'; header('Location: evalregister.php'); exit; }\n  list($status, $resp, $errno, $error) = api_request('POST','/api/evaluator/register',[\n    'employee_id'=>intval($employee_id),'name'=>$name,'email'=>$email,'department'=>$department,'password'=>$password\n  ]);\n  if ($errno) { $_SESSION['error']='Register failed (network): '.$error; header('Location: evalregister.php'); exit; }\n  $data = json_decode($resp, true);\n  if ($status===201) { $_SESSION['flash']='Registration successful. Please login.'; header('Location: evallogin.php'); exit; }\n  $_SESSION['error']=$data['error'] ?? 'Registration failed'; header('Location: evalregister.php'); exit;\n}\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  ", "Evaluator/evaldashb.php": "<?php\nsession_start();\nrequire_once __DIR__ . '/../helpers/api_client.php';\nif($_SERVER['REQUEST_METHOD']==='POST' && !isset($_SESSION['token'])){\n  $employeeId=$_POST['evalId'] ?? $_POST['employee_id'] ?? '';\n  $password=$_POST['password'] ?? '';\n  if($employeeId && $password){\n    list($status,$resp,$errno,$error)=api_request('POST','/api/login/evaluator',['employee_id'=>intval($employeeId),'password'=>$password]);\n    if(!$errno){\n      $data=json_decode($resp,true);\n      if($status===200 && isset($data['token'])){ $_SESSION['token']=$data['token']; $_SESSION['user']=$data['user']; }\n      else { $_SESSION['error']=$data['error'] ?? 'Login failed'; header('Location: evallogin.php'); exit; }\n    }else{ $_SESSION['error']='Login failed (network): '.$error; header('Location: evallogin.php'); exit; }\n  }else{ header('Location: evallogin.php'); exit; }\n}\nif(!isset($_SESSION['token'])){ header('Location: evallogin.php'); exit; }\n?><?php\nsession_start();\nrequire_once __DIR__ . '/../helpers/api_client.php';\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && !isset($_SESSION['token'])) {\n  $employeeId = $_POST['evalId'] ?? $_POST['employee_id'] ?? '';\n  $password   = $_POST['password'] ?? '';"}, "admin_files_preview": {"Admin/adminlogin.php": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"api-base\" content=\"http://localhost:5000\">\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Admin Login</title>\n\n  <!-- Font Awesome (for input icons) -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\n  <!-- Page-only stylesheet -->\n  <link rel=\"stylesheet\" href=\"../Admin/admin css/adminlogin.css\" />\n</head>\n<body>\n\n<main class=\"center-wrapper\">\n  <section class=\"form-container\" role=\"dialog\" aria-labelledby=\"loginTitle\" aria-describedby=\"loginDesc\">\n    <img src=\"../assets/sti_logo.png\" alt=\"STI College Logo\" class=\"logo\" />\n    <h1 id=\"loginTitle\" class=\"title\">Admin Login</h1>\n    <p id=\"loginDesc\" class=\"subtitle\">Sign in with your Admin ID and password.</p>\n\n    <form method=\"POST\" action=\"admindashb.php\" autocomplete=\"on\" novalidate>\n      <!-- Admin ID -->\n      <div class=\"input-icon\">\n        <i class=\"fa-solid fa-user-shield\" aria-hidden=\"true\"></i>\n        <label for=\"admin_id\" class=\"sr-only\">Admin ID</label>\n        <input id=\"admin_id\" name=\"admin_id\" type=\"text\"\n               placeholder=\"Admin", "Admin/admincheck.php": "MISSING", "Admin/admindashb.php": "<?php\nsession_start();\nrequire_once __DIR__ . '/../helpers/api_client.php';\nif($_SERVER['REQUEST_METHOD']==='POST' && !isset($_SESSION['token'])){\n  $admin_id=$_POST['admin_id'] ?? '';\n  $password=$_POST['password'] ?? '';\n  if($admin_id && $password){\n    list($status,$resp,$errno,$error)=api_request('POST','/api/login/admin',['admin_id'=>intval($admin_id),'password'=>$password]);\n    if(!$errno){\n      $data=json_decode($resp,true);\n      if($status===200 && isset($data['token'])){ $_SESSION['token']=$data['token']; $_SESSION['user']=$data['user']; }\n      else { $_SESSION['error']=$data['error'] ?? 'Login failed'; header('Location: adminlogin.php'); exit; }\n    }else{ $_SESSION['error']='Login failed (network): '.$error; header('Location: adminlogin.php'); exit; }\n  }else{ header('Location: adminlogin.php'); exit; }\n}\nif(!isset($_SESSION['token'])){ header('Location: adminlogin.php'); exit; }\n?><?php\nsession_start();\nrequire_once __DIR__ . '/../helpers/api_client.php';\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && !isset($_SESSION['token'])) {\n  $admin_id = $_POST['admin_id'] ?? '';\n  $password = $_POST['password'] ?? '';\n  if ($admin_id && $password) {\n    list($status, $resp, $"}, "routes_preview": {"node_modules/router/lib/route.js": "/*!\n * router\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nconst debug = require('debug')('router:route')\nconst Layer = require('./layer')\nconst { METHODS } = require('node:http')\n\n/**\n * Module variables.\n * @private\n */\n\nconst slice = Array.prototype.slice\nconst flatten = Array.prototype.flat\nconst methods = METHODS.map((method) => method.toLowerCase())\n\n/**\n * Expose `Route`.\n */\n\nmodule.exports = Route\n\n/**\n * Initialize `Route` with the given `path`,\n *\n * @param {String} path\n * @api private\n */\n\nfunction Route (path) {\n  debug('new %o', path)\n  this.path = path\n  this.stack = []\n\n  // route handlers for various http methods\n  this.methods = Object.create(null)\n}\n\n/**\n * @private\n */\n\nRoute.prototype._handlesMethod = function _handlesMethod (method) {\n  if (this.methods._all) {\n    return true\n  }\n\n  // normalize name\n  let name = typeof method === 'string'\n    ? method.toLowerCase()\n    : method\n\n  if (name === 'head' && !this.methods.head) {\n    name = 'get'\n  }\n\n  return Boolean(this.methods[name])\n}\n\n/**\n * @return {array} supported HTTP methods\n * @private\n */\n\nRoute.prototype._methods = function _methods () {\n  const methods = Object.keys(this.methods)\n\n  // append automatic head\n  if (this.methods.get && !this.methods.head) {\n    methods.push('head')\n  }\n\n  for (let i = 0; i < methods.length; i++) {\n    // make upper case\n    methods[i] = methods[i].toUpperCase()\n  }\n\n  return methods\n}\n\n/**\n * dispatch req, res into this route\n *\n * @private\n */\n\nRoute.prototype.dispatch = function dispatch (req, res, done) {\n  let idx = 0\n  const stack = this.stack\n  let sync = 0\n\n  if (stack.length === 0) {\n    return done()\n  }\n\n  let method = typeof req.method === 'string'\n    ? req.method.toLowerCase()\n    : req.method\n\n  if (method === 'head' && !this.methods.head) {\n    method = 'get'\n  }\n\n  req.route = this\n\n  next()\n\n  function next (err)", "routes/adminRoute.js": "const e=require('express');\nconst { requireAuth,requireRole } = require('../middlewares/authMiddleware');\nconst r = e.Router();\n\nr.use(requireAuth,requireRole('admin'));\nr.get('/admindashb',(q,s)=>s.json({title:'Admin Dashboard'}));\n\nmodule.exports=r;", "routes/authRoute.js": "const express = require('express');\nconst { requireAuth } = require('../middlewares/authMiddleware');\nconst c = require('../controllers/authController');\nconst v = require('../middlewares/validatorMiddleware');\nconst r = express.Router();\n\n// Registration (student/evaluator only)\nr.post('/student/register', v.studentRegister, c.registerStudent);\nr.post('/evaluator/register', v.evaluatorRegister, c.registerEvaluator);\n\n// Login per role using IDs\nr.post('/login/student', v.studentLogin, c.loginStudent);\nr.post('/login/evaluator', v.evaluatorLogin, c.loginEvaluator);\nr.post('/login/admin', v.adminLogin, c.loginAdmin);\n\n// Me\nr.get('/me', requireAuth, c.me);\n\nmodule.exports = r;\n", "routes/evaluatorRoute.js": "const e=require('express');\nconst { requireAuth,requireRole }=require('../middlewares/authMiddleware');\nconst r = e.Router();r.use(requireAuth, requireRole('evaluator','admin'));\n\nr.get('/evaldashb',(q,s)=>s.json({title:'Evaluator Dashboard'}));\n\nmodule.exports = r;", "routes/studentRoute.js": "const e=require('express');\nconst { requireAuth,requireRole }=require('../middlewares/authMiddleware');\nconst r = e.Router();r.use(requireAuth,requireRole('student','admin'));\n\nr.get('/studdashb',(q,s)=>s.json({title:'Student Dashboard'}));\n\nmodule.exports = r;"}, "controllers_preview": {"controllers/authController.js": "const { validationResult } = require('express-validator');\nconst jwt = require('jsonwebtoken');\nconst { hashPassword, comparePassword } = require('../utils/password');\nconst Students = require('../models/studentModel');\nconst Evaluators = require('../models/evaluatorModel');\nconst Admins = require('../models/adminModel');\n\nconst EXP = process.env.JWT_EXPIRES_IN || '1d';\nconst sign = (sub, role) => jwt.sign({ sub, role }, process.env.JWT_SECRET || 'devsecret', { expiresIn: EXP });\n\n// Student register\nasync function registerStudent(req,res,next){\n  try{\n    const errors=validationResult(req); if(!errors.isEmpty()) return res.status(400).json({errors:errors.array()});\n    const { student_id, full_name, email, course, password } = req.body;\n    const exists = await Students.findById(student_id) || await Students.findByEmail(email);\n    if (exists) return res.status(409).json({ error: 'Student ID or email already exists' });\n    const password_hash = await hashPassword(password);\n    await Students.create({ student_id, full_name, email, course, password_hash });\n    res.status(201).json({ message: 'Student registered' });\n  }catch(e){ next(e); }\n}\n\n// Evaluator register\nasync function registerEvaluator(req,res,next){\n  try{\n    const errors=validationResult(req); if(!errors.isEmpty()) return res.status(400).json({errors:errors.array()});\n    const { employee_id, name, email, department, password } = req.body;\n    const exists = await Evaluators.findById(employee_id) || await Evaluators.findByEmail(email);\n    if (exists) return res.status(409).json({ error: 'Employee ID or email already exists' });\n    const password_hash = await hashPassword(password);\n    await Evaluators.create({ employee_id, name, email, department, password_hash });\n    res.status(201).json({ message: 'Evaluator registered' });\n  }catch(e){ next(e); }\n}\n\n// Student login by ID\nasync function loginStudent(req,res,next){\n  try{\n    const { student_id, password } = req.body;\n    const u = await Studen"}, "server_port_default": "5000"}